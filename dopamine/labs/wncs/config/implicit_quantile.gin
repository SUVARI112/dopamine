# Hyperparameters follow Dabney et al. (2018), but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.

Environment.include_zeros = True
Environment.cost_type = "state-cost" 
Environment.algorithm="iqn"

JaxImplicitQuantileAgent.kappa = 1.0
JaxImplicitQuantileAgent.num_tau_samples = 64
JaxImplicitQuantileAgent.num_tau_prime_samples = 64
JaxImplicitQuantileAgent.num_quantile_samples = 32
JaxImplicitQuantileAgent.gamma = 0.95
JaxImplicitQuantileAgent.update_horizon = 1
JaxImplicitQuantileAgent.min_replay_history = 1_000  # agent steps
JaxImplicitQuantileAgent.warm_start_steps = 5_000
JaxImplicitQuantileAgent.update_period = 1
JaxImplicitQuantileAgent.target_update_period = 1 # agent steps
JaxImplicitQuantileAgent.epsilon_train = 0.01
JaxImplicitQuantileAgent.epsilon_eval = 0.001
JaxImplicitQuantileAgent.epsilon_decay_period = 50_000  # agent steps

JaxImplicitQuantileAgent.optimizer = 'adam'
create_optimizer.anneal_learning_rate=False
create_optimizer.initial_learning_rate= 5.e-4
create_optimizer.final_learning_rate=0.0001
create_optimizer.anneal_steps=24_000
create_optimizer.eps = 0.0003125
# Common default values:
# -TensorFlow's Adam: 1e-7 or 1e-8
# -PyTorch's Adam: 1e-8
# -JAX/Optax's Adam: 1e-8
# -Your implementation: 1.5e-4 (relatively large, but could be fine depending on your specific problem)

# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
create_runner.schedule = 'continuous_train'
create_agent.agent_name = 'jax_implicit_quantile'
create_agent.debug_mode = True
Runner.num_iterations = 1
Runner.training_steps = 250_000
Runner.evaluation_steps = 500
Runner.max_steps_per_episode = 500
Runner.clip_rewards=False

ReplayBuffer.max_capacity = 20_000
ReplayBuffer.batch_size = 32
